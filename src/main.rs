extern crate sdl2;

use sdl2::event::Event;
use sdl2::keyboard::Keycode;
use sdl2::pixels::{Color, PixelFormatEnum};
use sdl2::rect::{Point, Rect, self};
use sdl2::sys::{self, SDL_Point};
use serialport::SerialPort;
use std::time::Duration;

pub fn read_serial(mut port : Box<dyn SerialPort>) -> Option<u8>
{
    let mut serial_buf: Vec<u8> = vec![0; 1];
    let mut read_bytes = 0;
        match port.read(serial_buf.as_mut_slice())
        {
            Ok(n) => return Some(serial_buf[0]),
            Err(_e) => return None,
        }
}

pub fn get_points(bytes : Vec<u8>) -> Vec<Point>
{
    let mut points: Vec<Point> = Vec::new();
    let mut y = 0;
    for byte in bytes.iter()
    {
        for bit in 0..7
        {
            if byte & (1 << bit) != 0
            {
                points.push(Point::new(7 - bit, y));
            }
        }
        y = y + 1;
    }
    points
}

pub fn main() -> Result<(), String> {

    let font_bytes : [u8; 8*224] = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //  
    0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00, // !
    0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, // "
    0x36, 0x36, 0x7f, 0x36, 0x7f, 0x36, 0x36, 0x00, // #
    0x0c, 0x3f, 0x68, 0x3e, 0x0b, 0x7e, 0x18, 0x00, // $
    0x60, 0x66, 0x0c, 0x18, 0x30, 0x66, 0x06, 0x00, // %
    0x38, 0x6c, 0x6c, 0x38, 0x6d, 0x66, 0x3b, 0x00, // &
    0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, // '
    0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, // (
    0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, // )
    0x00, 0x18, 0x7e, 0x3c, 0x7e, 0x18, 0x00, 0x00, // *
    0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, // +
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, // ,
    0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, // -
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, // .
    0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, // /

    0x3c, 0x66, 0x6e, 0x7e, 0x76, 0x66, 0x3c, 0x00, // 0
    0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, // 1
    0x3c, 0x66, 0x06, 0x0c, 0x18, 0x30, 0x7e, 0x00, // 2
    0x3c, 0x66, 0x06, 0x1c, 0x06, 0x66, 0x3c, 0x00, // 3
    0x0c, 0x1c, 0x3c, 0x6c, 0x7e, 0x0c, 0x0c, 0x00, // 4
    0x7e, 0x60, 0x7c, 0x06, 0x06, 0x66, 0x3c, 0x00, // 5
    0x1c, 0x30, 0x60, 0x7c, 0x66, 0x66, 0x3c, 0x00, // 6
    0x7e, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00, // 7
    0x3c, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x3c, 0x00, // 8
    0x3c, 0x66, 0x66, 0x3e, 0x06, 0x0c, 0x38, 0x00, // 9
    0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, // :
    0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x30, // ;
    0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, // <
    0x00, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00, 0x00, // =
    0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, // >
    0x3c, 0x66, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x00, // ?

    0x3c, 0x66, 0x6e, 0x6a, 0x6e, 0x60, 0x3c, 0x00, // @
    0x3c, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00, // A
    0x7c, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x7c, 0x00, // B
    0x3c, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3c, 0x00, // C
    0x78, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0x78, 0x00, // D
    0x7e, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x7e, 0x00, // E
    0x7e, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x00, // F
    0x3c, 0x66, 0x60, 0x6e, 0x66, 0x66, 0x3c, 0x00, // G
    0x66, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00, // H
    0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, // I
    0x3e, 0x0c, 0x0c, 0x0c, 0x0c, 0x6c, 0x38, 0x00, // J
    0x66, 0x6c, 0x78, 0x70, 0x78, 0x6c, 0x66, 0x00, // K
    0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7e, 0x00, // L
    0x63, 0x77, 0x6b, 0x6b, 0x63, 0x63, 0x63, 0x00, // M
    0x66, 0x66, 0x76, 0x7e, 0x6e, 0x66, 0x66, 0x00, // N
    0x3c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, // O

    0x7c, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x00, // P
    0x3c, 0x66, 0x66, 0x66, 0x6a, 0x6c, 0x36, 0x00, // Q
    0x7c, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x00, // R
    0x3c, 0x66, 0x60, 0x3c, 0x06, 0x66, 0x3c, 0x00, // S
    0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, // T
    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, // U
    0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, // V
    0x63, 0x63, 0x6b, 0x6b, 0x7f, 0x77, 0x63, 0x00, // W
    0x66, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0x66, 0x00, // X
    0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x00, // Y
    0x7e, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x7e, 0x00, // Z
    0x7c, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7c, 0x00, // [
    0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, // 
    0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00, // ]
    0x18, 0x3c, 0x66, 0x42, 0x00, 0x00, 0x00, 0x00, // ^
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, // _

    0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, // `
    0x00, 0x00, 0x3c, 0x06, 0x3e, 0x66, 0x3e, 0x00, // a
    0x60, 0x60, 0x7c, 0x66, 0x66, 0x66, 0x7c, 0x00, // b
    0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x00, // c
    0x06, 0x06, 0x3e, 0x66, 0x66, 0x66, 0x3e, 0x00, // d
    0x00, 0x00, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00, // e
    0x1c, 0x30, 0x30, 0x7c, 0x30, 0x30, 0x30, 0x00, // f
    0x00, 0x00, 0x3e, 0x66, 0x66, 0x3e, 0x06, 0x3c, // g
    0x60, 0x60, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x00, // h
    0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00, // i
    0x0c, 0x00, 0x1c, 0x0c, 0x0c, 0x0c, 0x0c, 0x78, // j
    0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0x00, // k
    0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, // l
    0x00, 0x00, 0x36, 0x7f, 0x6b, 0x6b, 0x63, 0x00, // m
    0x00, 0x00, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x00, // n
    0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x00, // o

    0x00, 0x00, 0x7c, 0x66, 0x66, 0x7c, 0x60, 0x60, // p
    0x00, 0x00, 0x3e, 0x66, 0x66, 0x3e, 0x06, 0x07, // q
    0x00, 0x00, 0x6c, 0x76, 0x60, 0x60, 0x60, 0x00, // r
    0x00, 0x00, 0x3e, 0x60, 0x3c, 0x06, 0x7c, 0x00, // s
    0x30, 0x30, 0x78, 0x30, 0x30, 0x30, 0x1e, 0x00, // t
    0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00, // u
    0x00, 0x00, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, // v
    0x00, 0x00, 0x63, 0x6b, 0x6b, 0x7f, 0x36, 0x00, // w
    0x00, 0x00, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0x00, // x
    0x00, 0x00, 0x66, 0x66, 0x66, 0x3e, 0x06, 0x3c, // y
    0x00, 0x00, 0x7e, 0x0c, 0x18, 0x30, 0x7e, 0x00, // z
    0x0c, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0c, 0x00, // {
    0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00, // |
    0x30, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x30, 0x00, // }
    0x66, 0xd6, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, // ~
    0x3c, 0x42, 0x9d, 0xb1, 0xb1, 0x9d, 0x42, 0x3c, // © (should be delete)

    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //

    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x1c, 0x36, 0x30, 0x7c, 0x30, 0x30, 0x7e, 0x00, // £
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //		
    ];

    println!("Start");
    let sdl_context = sdl2::init()?;
    let video_subsystem = sdl_context.video()?;

    let window = video_subsystem
        .window("agon-vdp-sdl", 800, 600)
        .position_centered()
        .opengl()
        .build()
        .map_err(|e| e.to_string())?;

    let mut canvas = window.into_canvas().build().map_err(|e| e.to_string())?;
    let mut char_x = 0;
    let mut char_y = 0;

    canvas.set_draw_color(Color::RGB(0, 0, 0));
    canvas.clear();
    canvas.present();
    let mut event_pump = sdl_context.event_pump()?;

    'running: loop {
        for event in event_pump.poll_iter() {
            match event {
                Event::Quit { .. } => break 'running,
                Event::KeyDown { keycode, ..} => 
                {
                    let mut ascii = keycode.unwrap() as usize;
                    ascii = ascii - 32;
                    if ascii < font_bytes.len()
                    {
                        println!("Pressed keycode:{}", ascii);
                        let points = 		get_points(font_bytes[8*ascii..8*ascii+8].to_vec());
                        canvas.set_draw_color(Color::RGB(255, 255, 255));
                        canvas.set_viewport(Rect::new(char_x * 8,char_y * 8, 8, 8));
                        canvas.draw_points(&points[..]);
                        char_x = char_x + 1;
                        if char_x > 80
                        {
                            char_x = 0;
                            char_y = char_y + 1;
                        }
                    }
                },
                _ => {}
            }
        }

        //canvas.clear();
        canvas.present();
        ::std::thread::sleep(Duration::new(0, 1_000_000_000u32 / 30));
        // The rest of the game loop goes here...
        if false
        {
            // Serial
            let port = serialport::new("/dev/ttyUSB0", 1152_000)
            .timeout(Duration::from_millis(10))
            .open().expect("Failed to open port");
    
            // let ports = serialport::available_ports().expect("No ports found!");
            // for p in ports {
            //     println!("{}", p.port_name);
            // }
    
            //println!("Read from serial.");
            match read_serial(port)
            {
                Some(n) => match n
                {
                    n if n >= 0x20 && n != 0x7F => println!("{}", n as char),
                    0x08 => println!("Cursor Left"),
                    _n => println!("Unknown Command {:#02x} received!", n),
                }
                None => (),
            }
        }
    }
    println!("Quit");

    Ok(())
}